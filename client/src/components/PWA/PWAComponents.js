import React from 'react';\nimport { usePWA } from './PWAHooks';\n\nexport const PWAInstallButton = ({ className = '' }) => {\n  const { isInstallable, isInstalled, installApp } = usePWA();\n\n  const handleInstall = async () => {\n    console.log('Install button clicked');\n    const success = await installApp();\n    if (success) {\n      console.log('App installed successfully!');\n    }\n  };\n\n  // Don't show if already installed or not installable\n  if (isInstalled || !isInstallable) {\n    return null;\n  }\n\n  return (\n    <button\n      onClick={handleInstall}\n      className={`\n        bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 \n        text-white px-4 py-3 rounded-2xl shadow-lg hover:shadow-xl\n        flex items-center space-x-2 transition-all duration-300 transform hover:-translate-y-1\n        font-semibold border-2 border-white/20 backdrop-blur-sm\n        ${className}\n      `}\n      title=\"Install Vila Falo app for better experience\"\n    >\n      <span>Install App</span>\n    </button>\n  );\n};\n\nexport const PWAOfflineIndicator = () => {\n  const { isOnline } = usePWA();\n\n  if (isOnline) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed top-0 left-0 right-0 bg-yellow-500 text-white px-4 py-2 text-center text-sm z-50\">\n      <span className=\"mr-2\">Offline</span>\n      You're offline. Orders will sync when connection is restored.\n    </div>\n  );\n};\n\n// Simple install prompt for testing\nexport const PWAInstallPrompt = () => {\n  const [showPrompt, setShowPrompt] = React.useState(false);\n  const [deferredPrompt, setDeferredPrompt] = React.useState(null);\n\n  React.useEffect(() => {\n    const handler = (e) => {\n      console.log('beforeinstallprompt triggered');\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setShowPrompt(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handler);\n    \n    // For testing - show prompt after 5 seconds if not already shown\n    const timer = setTimeout(() => {\n      if (!showPrompt && !window.matchMedia('(display-mode: standalone)').matches) {\n        console.log('Forcing install prompt for testing');\n        setShowPrompt(true);\n      }\n    }, 5000);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler);\n      clearTimeout(timer);\n    };\n  }, [showPrompt]);\n\n  const handleInstall = async () => {\n    console.log('Install button clicked');\n    \n    if (deferredPrompt) {\n      try {\n        console.log('Showing browser install prompt...');\n        deferredPrompt.prompt();\n        \n        const { outcome } = await deferredPrompt.userChoice;\n        console.log(`User choice: ${outcome}`);\n        \n        if (outcome === 'accepted') {\n          console.log('User accepted the install prompt');\n          setDeferredPrompt(null);\n        } else {\n          console.log('User dismissed the install prompt');\n        }\n      } catch (error) {\n        console.error('Install prompt error:', error);\n        showFallbackInstructions();\n      }\n    } else {\n      console.log('No deferred prompt available, showing manual instructions');\n      showFallbackInstructions();\n    }\n    \n    setShowPrompt(false);\n  };\n  \n  const showFallbackInstructions = () => {\n    const isChrome = navigator.userAgent.includes('Chrome');\n    const isEdge = navigator.userAgent.includes('Edge');\n    const isSafari = navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    let instructions = 'To install Vila Falo app:';\n    \n    if (isChrome && !isMobile) {\n      instructions += '\\n\\nChrome Desktop:\\n• Look for + icon in address bar\\n• Or: Menu > Install Vila Falo';\n    } else if (isChrome && isMobile) {\n      instructions += '\\n\\nChrome Mobile:\\n• Menu > Add to Home Screen\\n• Or: Install App if available';\n    } else if (isEdge) {\n      instructions += '\\n\\nEdge:\\n• Look for + icon in address bar\\n• Or: Menu > Apps > Install this site';\n    } else if (isSafari) {\n      instructions += '\\n\\nSafari iOS:\\n• Tap Share button\\n• Select Add to Home Screen\\n• Tap Add';\n    } else {\n      instructions += '\\n\\nYour Browser:\\n• Look for install icon in address bar\\n• Or check browser menu for Install or Add to Home Screen';\n    }\n    \n    instructions += '\\n\\nTip: The app icon will appear on your home screen/desktop!';\n    \n    alert(instructions);\n  };\n\n  if (!showPrompt) return null;\n\n  return (\n    <div className=\"fixed bottom-4 left-4 right-4 bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 rounded-2xl shadow-2xl z-50 md:max-w-sm md:left-auto\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <span className=\"text-2xl\">App</span>\n          <div>\n            <h3 className=\"font-bold\">Install Vila Falo</h3>\n            <p className=\"text-sm opacity-90\">Get the app for better experience</p>\n          </div>\n        </div>\n        <button\n          onClick={() => setShowPrompt(false)}\n          className=\"text-white/70 hover:text-white text-xl\"\n        >\n          X\n        </button>\n      </div>\n      <div className=\"flex space-x-3 mt-3\">\n        <button\n          onClick={handleInstall}\n          className=\"flex-1 bg-white text-blue-600 font-semibold py-2 px-4 rounded-xl hover:bg-gray-100 transition-colors\"\n        >\n          Install\n        </button>\n        <button\n          onClick={() => setShowPrompt(false)}\n          className=\"px-4 py-2 text-white/90 hover:text-white transition-colors\"\n        >\n          Later\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Notification permission component\nexport const PWANotificationSetup = () => {\n  const { requestNotificationPermission } = usePWA();\n  const [permissionStatus, setPermissionStatus] = React.useState(\n    'Notification' in window ? Notification.permission : 'not-supported'\n  );\n\n  const handleRequestPermission = async () => {\n    const granted = await requestNotificationPermission();\n    setPermissionStatus(granted ? 'granted' : 'denied');\n  };\n\n  if (permissionStatus === 'granted' || permissionStatus === 'not-supported') {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <span className=\"text-green-600 mr-2\">Bell</span>\n          <div>\n            <h3 className=\"text-sm font-medium text-green-800\">Enable Notifications</h3>\n            <p className=\"text-sm text-green-600\">Get notified about new orders and updates</p>\n          </div>\n        </div>\n        <button\n          onClick={handleRequestPermission}\n          className=\"bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm\"\n        >\n          Enable\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default {\n  PWAInstallButton,\n  PWAOfflineIndicator,\n  PWANotificationSetup,\n  PWAInstallPrompt\n};